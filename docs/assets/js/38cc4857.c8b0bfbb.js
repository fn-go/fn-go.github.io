"use strict";(self.webpackChunkfngo=self.webpackChunkfngo||[]).push([[57],{3905:function(e,n,t){t.d(n,{Zo:function(){return f},kt:function(){return p}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},f=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),d=c(t),p=i,m=d["".concat(u,".").concat(p)]||d[p]||s[p]||o;return t?r.createElement(m,a(a({ref:n},f),{},{components:t})):r.createElement(m,a({ref:n},f))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6588:function(e,n,t){t.r(n),t.d(n,{assets:function(){return f},contentTitle:function(){return u},default:function(){return p},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],l={title:"Makefile"},u="Converting from a `Makefile`",c={unversionedId:"tutorials/convert/make/index",id:"tutorials/convert/make/index",title:"Makefile",description:"Here's an example Makefile that we'll \"Divide and Conquer\" in the next conversion tutorials.",source:"@site/content/tutorials/400-convert/100-make/index.mdx",sourceDirName:"tutorials/400-convert/100-make",slug:"/tutorials/convert/make/",permalink:"/tutorials/convert/make/",draft:!1,tags:[],version:"current",frontMatter:{title:"Makefile"},sidebar:"defaultSidebar",previous:{title:"Convert from...",permalink:"/tutorials/convert/"},next:{title:"Rules",permalink:"/tutorials/convert/make/rules"}},f={},s=[{value:"<code>Makefile</code>",id:"makefile",level:2}],d={toc:s};function p(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"converting-from-a-makefile"},"Converting from a ",(0,o.kt)("inlineCode",{parentName:"h1"},"Makefile")),(0,o.kt)("p",null,"Here's an example ",(0,o.kt)("inlineCode",{parentName:"p"},"Makefile"),' that we\'ll "Divide and Conquer" in the next conversion tutorials.'),(0,o.kt)("h2",{id:"makefile"},(0,o.kt)("inlineCode",{parentName:"h2"},"Makefile")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Makefile"',title:'"Makefile"'},'BINARY      := superdo\nVET_REPORT  := vet.report\nTEST_REPORT := tests.xml\nGOARCH      := amd64\n\nVERSION ?= ?\nCOMMIT  := $(shell git rev-parse HEAD)\nBRANCH  := $(shell git rev-parse --abbrev-ref HEAD)\n\nGITHUB_USERNAME := turtlemonvh\nBUILD_DIR       := ${GOPATH}/src/github.com/${GITHUB_USERNAME}/${BINARY}\nCURRENT_DIR     := $(shell pwd)\nBUILD_DIR_LINK  := $(shell readlink ${BUILD_DIR})\n\nLDFLAGS := -ldflags "-X main.VERSION=${VERSION} -X main.COMMIT=${COMMIT} -X main.BRANCH=${BRANCH}"\n\n.PHONY: %\n\nall: link clean test vet build\n\nlink:\n    if [ "${BUILD_DIR_LINK}" != "${CURRENT_DIR}" ]; then \\\n        echo "Fixing symlinks for build"; \\\n        rm -f ${BUILD_DIR}; \\\n        ln -s ${CURRENT_DIR} ${BUILD_DIR}; \\\n    fi\n\nbuild: build.linux build.darwin build.windows\n\nbuild.linux:\n    cd ${BUILD_DIR}; \\\n    GOOS=linux GOARCH=${GOARCH} \\\n      go build ${LDFLAGS} -o ${BINARY}-linux-${GOARCH} .\n\nbuild.darwin:\n    cd ${BUILD_DIR}; \\\n    GOOS=darwin GOARCH=${GOARCH} \\\n      go build ${LDFLAGS} -o ${BINARY}-darwin-${GOARCH} .\n\nbuild.windows:\n    cd ${BUILD_DIR}; \\\n    GOOS=windows GOARCH=${GOARCH} \\\n      go build ${LDFLAGS} -o ${BINARY}-windows-${GOARCH}.exe .\n\ntest:\n    if ! hash go2xunit 2>/dev/null; then go install github.com/tebeka/go2xunit; fi\n    cd ${BUILD_DIR}; \\\n    go test -v ./... 2>&1 | go2xunit -output ${TEST_REPORT}\n\nvet:\n    cd ${BUILD_DIR}; \\\n    go vet ./... > ${VET_REPORT} 2>&1\n\nfmt:\n    cd ${BUILD_DIR}; \\\n    go fmt $$(go list ./... | grep -v /vendor/)\n\nclean:\n    -rm -f ${TEST_REPORT}\n    -rm -f ${VET_REPORT}\n    -rm -f ${BINARY}-*\n')))}p.isMDXComponent=!0}}]);