"use strict";(self.webpackChunkgofn=self.webpackChunkgofn||[]).push([[321],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return c}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(t),c=i,f=m["".concat(s,".").concat(c)]||m[c]||d[c]||o;return t?a.createElement(f,r(r({ref:n},u),{},{components:t})):a.createElement(f,r({ref:n},u))}));function c(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2019:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return m}});var a,i=t(7462),o=t(3366),r=(t(7294),t(3905)),l=["components"],s={slug:"/",title:"Getting Started",sidebar_position:1},p="About `fn`",u={unversionedId:"index",id:"index",title:"Getting Started",description:'fn is a "function-oriented" general purpose automation tool that aims to be simpler and more flexible than similar tools such as Make, Task, and Rake.',source:"@site/content/index.mdx",sourceDirName:".",slug:"/",permalink:"/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/",title:"Getting Started",sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"fn - cli",permalink:"/cli/"}},d={},m=[{value:"Basics",id:"basics",level:2},{value:"Understanding the <code>fnfile</code>",id:"understanding-the-fnfile",level:2},{value:"<code>fn</code> - Function Definition",id:"fn---function-definition",level:3},{value:"Common Steps",id:"common-steps",level:3},{value:"<code>do</code>",id:"do",level:4},{value:"<code>parallel</code>",id:"parallel",level:4},{value:"<code>sh</code>",id:"sh",level:4},{value:"Flexible Nature",id:"flexible-nature",level:3},{value:"Why is this important?",id:"why-is-this-important",level:3},{value:"Design Philosophy",id:"design-philosophy",level:2}],c=(a="Alert",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),f={toc:m};function h(e){var n=e.components,t=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"about-fn"},"About ",(0,r.kt)("inlineCode",{parentName:"h1"},"fn")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fn"),' is a "function-oriented" general purpose automation tool that aims to be simpler and more flexible than similar tools such as Make, Task, and Rake.'),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fn")," is a commandline program that runs ",(0,r.kt)("inlineCode",{parentName:"p"},"functions")," defined in a ",(0,r.kt)("inlineCode",{parentName:"p"},"fnfile.yml"),", similar to how you use ",(0,r.kt)("inlineCode",{parentName:"p"},"make")," to run targets in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Makefile"),"."),(0,r.kt)("h2",{id:"basics"},"Basics"),(0,r.kt)("p",null,"An example to get you started:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="fnfile.yml"',title:'"fnfile.yml"'},"version: '0.1'\nfns:\n  hello: echo \"Hello, World!\"\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f fn hello\nHello, World\n")),(0,r.kt)("h2",{id:"understanding-the-fnfile"},"Understanding the ",(0,r.kt)("inlineCode",{parentName:"h2"},"fnfile")),(0,r.kt)("p",null,"The top-level ",(0,r.kt)("inlineCode",{parentName:"p"},"fns")," is a map of defined functions. With the key being the name of the ",(0,r.kt)("inlineCode",{parentName:"p"},"fn"),", and the value being one of several types, allowing you to express intent without requiring excessive syntax."),(0,r.kt)("h3",{id:"fn---function-definition"},(0,r.kt)("inlineCode",{parentName:"h3"},"fn")," - Function Definition"),(0,r.kt)("p",null,"The common fields of an ",(0,r.kt)("inlineCode",{parentName:"p"},"fn")," are:"),(0,r.kt)(c,{style:{marginBottom:"1em"},variant:"filled",severity:"info",mdxType:"Alert"},"Check out the ",(0,r.kt)("a",{href:"/api/fn"},"API Reference")," for a complete list of fields"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"do")," - The ",(0,r.kt)("a",{href:"./api/steps/#do"},(0,r.kt)("inlineCode",{parentName:"li"},"do"))," step. ",(0,r.kt)("em",{parentName:"li"},"required**")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dir")," - The working directory when running shell steps. The ",(0,r.kt)("em",{parentName:"li"},"default")," is same directory as the ",(0,r.kt)("inlineCode",{parentName:"li"},"fnfile.yml"),".")),(0,r.kt)("h3",{id:"common-steps"},"Common Steps"),(0,r.kt)(c,{style:{marginBottom:"1em"},variant:"filled",severity:"info",mdxType:"Alert"},"Check out the ",(0,r.kt)("a",{href:"/api/steps"},"Steps API Reference")," for a complete list of available steps"),(0,r.kt)("h4",{id:"do"},(0,r.kt)("inlineCode",{parentName:"h4"},"do")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Do")," performs the given steps serially."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"do:\n  steps: <[]step>\n")),(0,r.kt)("h4",{id:"parallel"},(0,r.kt)("inlineCode",{parentName:"h4"},"parallel")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Parallel")," performs the given steps in parallel."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"parallel:\n  steps: <[]step>\n")),(0,r.kt)("h4",{id:"sh"},(0,r.kt)("inlineCode",{parentName:"h4"},"sh")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Sh")," runs a shell command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"sh:\n  run: <string>\n")),(0,r.kt)("h3",{id:"flexible-nature"},"Flexible Nature"),(0,r.kt)("p",null,"The following tasks are all the same. The resolve to a single ",(0,r.kt)("inlineCode",{parentName:"p"},"sh")," step, which runs a shell command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'fns:\n  hello: echo "hello"\n  foo:\n  - echo "foo"\n  bar:\n    do: echo "bar"\n  baz:\n    do:\n    - echo "baz"\n  biz:\n    do:\n    - sh: echo "biz"\n  qux:\n    do:\n    - sh:\n        run: echo "qux"\n')),(0,r.kt)("h3",{id:"why-is-this-important"},"Why is this important?"),(0,r.kt)("p",null,"The design of ",(0,r.kt)("inlineCode",{parentName:"p"},"fn")," is to get out of your way as quickly as possible. Meaning if you don't need certain functionality, you don't need to declare it or even make room for it. Let's break this down further with an example. The definition of a ",(0,r.kt)("inlineCode",{parentName:"p"},"sh")," step:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# VALID\nsh:\n  run: <string>\n  dir: <string, optional>\n")),(0,r.kt)("p",null,"Since ",(0,r.kt)("inlineCode",{parentName:"p"},"dir")," is an optional field, that leaves only 1 required field ",(0,r.kt)("inlineCode",{parentName:"p"},"run"),", which is a ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),". Therefore, the entire step can be represented as just a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# VALID\nsh: <string>\n")),(0,r.kt)("p",null,"The definition of a ",(0,r.kt)("inlineCode",{parentName:"p"},"do")," allows for an array of steps to be declared, each one to be run in sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# VALID\ndo:\n  steps: <[]step>\n")),(0,r.kt)("p",null,"The minimum useful ",(0,r.kt)("inlineCode",{parentName:"p"},"do")," is that of 1 or more steps, so this representation becomes valid:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# VALID\ndo:\n- <step>\n")),(0,r.kt)(c,{style:{marginBottom:"1em"},variant:"filled",severity:"warning",mdxType:"Alert"},"Unfortunately, the next several representations are ambiguous, and thus are illegal syntax."),(0,r.kt)("p",null,"The bare minimum useful ",(0,r.kt)("inlineCode",{parentName:"p"},"do")," is that of only 1 step, but this is invalid because of potential field conflict/ambiguity."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# !INVALID - due to potential field conflict/ambiguity\ndo: <step>\n")),(0,r.kt)("p",null,"The most likely step, given the nature of ",(0,r.kt)("inlineCode",{parentName:"p"},"fn"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"make"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"task"),", etc. is that of an external binary or script you wish to execute. We arrive at ",(0,r.kt)("inlineCode",{parentName:"p"},"sh")," as our concrete ",(0,r.kt)("inlineCode",{parentName:"p"},"step")," to choose. Though, this is still invalid because of potential field conflict/ambiguity."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# !INVALID - due to potential field conflict/ambiguity\ndo: <sh>\n")),(0,r.kt)("p",null,"and since an ",(0,r.kt)("inlineCode",{parentName:"p"},"sh")," step can be represented as a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# VALID\ndo: <string>\n")),(0,r.kt)("p",null,"Furthermore, since a ",(0,r.kt)("inlineCode",{parentName:"p"},"fn"),' has only 1 "required" field, ',(0,r.kt)("inlineCode",{parentName:"p"},"do"),", we can represent the entire ",(0,r.kt)("inlineCode",{parentName:"p"},"fn")," definition as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# VALID\nfn: <string>\n")),(0,r.kt)("h2",{id:"design-philosophy"},"Design Philosophy"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fn")," aims to have a human-centered design, with emphasis on usability and aesthetics."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Even the smartest among us can feel inept as we fail to figure out which light switch or oven burner to turn on, or whether to push, pull, or slide a door.\nThe fault lies not in ourselves, but in product design that ignores the needs of users and the principles of cognitive psychology."),(0,r.kt)("p",{parentName:"blockquote"},"The problems range from ambiguous and hidden controls to arbitrary relationships between controls and functions, coupled with a lack of feedback or other assistance and unreasonable demands on memorization."),(0,r.kt)("p",{parentName:"blockquote"},"The rules are simple: make things visible, exploit natural relationships that couple function and control, and make intelligent use of constraints."),(0,r.kt)("p",{parentName:"blockquote"},"The goal: guide the user effortlessly to the right action on the right control at the right time."),(0,r.kt)("p",{parentName:"blockquote"},"-- ",(0,r.kt)("cite",null,(0,r.kt)("a",{parentName:"p",href:"https://www.uxmatters.com/mt/archives/2021/03/book-review-the-design-of-everyday-things.php"},"The Design of Everyday Things")))))}h.isMDXComponent=!0}}]);